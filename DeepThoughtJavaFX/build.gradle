buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'edu.sc.seis.gradle:launch4j:2.4.2'
    }
}

repositories {
    jcenter()
}


apply plugin: 'java'
apply plugin: 'kotlin'
apply plugin: 'application'

apply plugin: 'kotlin-kapt'

apply plugin: 'edu.sc.seis.launch4j'


mainClassName = "net.dankito.deepthought.javafx.DeepThoughtJavaFXApplicationKt"

def title = 'Deep Thought'


sourceCompatibility = "1.8"
targetCompatibility = "1.8"


sourceSets {
    main.java.srcDirs += [ 'src/main/kotlin', 'build/generated/source/kapt/main' ]
    test.java.srcDirs += [ 'src/test/kotlin', 'build/generated/source/kapt/test' ]

    main {
        resources {
            srcDirs = [ "src/main/kotlin", "src/main/resources" ] // for TornadoFX .fxml files should reside in the same folder as <View>.kt -> add src/main/kotlin as resource folder
            excludes = [ "**/*.kt", "**/*.java" ]
        }
    }
}


compileKotlin.kotlinOptions.jvmTarget = '1.8'
compileTestKotlin.kotlinOptions.jvmTarget = '1.8'


dependencies {
    compile project(':DeepThoughtUiCommon')
    compile project(':JavaCouchbaseLiteEntityManager')
    compile project(':UdpDevicesDiscoverer')

    kapt "com.google.dagger:dagger-compiler:$daggerVersion"

    compile("no.tornado:tornadofx:$tornadoFXVersion", {
        exclude group: 'org.apache.httpcomponents', module: 'httpclient'
    })

    compile "no.tornado:tornadofx-controls:$tornadoFXControlsVersion"
    compile "org.controlsfx:controlsfx:$controlsFXVersion"

    compile "ch.qos.logback:logback-core:$logbackVersion"
    compile "ch.qos.logback:logback-classic:$logbackVersion"

    // TODO: move to DeepThoughtCommon again
    compile project(':BibTeXImporterExporter')
}

compileJava {
    configurations.compile.each {
//        compile it
    }
}


jar {
    manifest {
        attributes  'Main-Class': mainClassName,
                    'Implementation-Title': title,
                    'Implementation-Version': appVersionName
    }

    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
}

launch4j {
    // TODO: set icon (also bundle JRE?)
    mainClassName = mainClassName
    version = '0.2'
    textVersion = '0.2'
}
