apply plugin: 'com.android.application'

apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'

apply plugin: 'kotlin-kapt'

// Put Fabric plugin after Android plugin
//apply plugin: 'io.fabric'
apply plugin: 'testfairy'

apply from: '../keys.gradle'


repositories {
    maven { url "https://dl.bintray.com/firzenyogesh/maven" }

    maven { url 'https://www.testfairy.com/maven' }
    maven { url 'https://maven.fabric.io/public' }
}


android {
    compileSdkVersion androidCompileSdkVersion
    buildToolsVersion androidBuildToolsVersion

    defaultConfig {
        applicationId "net.dankito.deepthought"
        minSdkVersion androidMinSdkVersion
        targetSdkVersion androidTargetSdkVersion

        versionCode appVersionCode
        versionName appVersionName

        resValue "string", "app_name", "DeepThought"

        multiDexEnabled true

        testInstrumentationRunner "net.dankito.deepthought.android.MockTestRunner"
    }

    buildTypes {
        debug {
            applicationIdSuffix = ".beta"
            resValue "string", "app_name", "DeepThought Beta"

            testCoverageEnabled = true

            ext.enableCrashlytics = false
            // Only use this flag on builds you don't proguard or upload to beta-by-crashlytics
            ext.alwaysUpdateBuildId = false
        }
        release {
            resValue "string", "app_name", "DeepThought"

            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    flavorDimensions "default"

    productFlavors {
        standard {
            ext.enableCrashlytics = false

            dimension = "default"
        }
        beta {
            applicationIdSuffix = ".beta"
            resValue "string", "app_name", "DeepThought Beta"

            dimension = "default"
        }
        extended {
            applicationIdSuffix = ".extended"
            resValue "string", "app_name", "DeepThought Extended"

            ext.enableCrashlytics = false

            dimension = "default"
        }
    }

    sourceSets {
        main.java.srcDirs += [ 'src/main/kotlin' ]
        standard.java.srcDirs += [ 'src/standard/kotlin', 'src/common/kotlin' ]
        beta.java.srcDirs += [ 'src/beta/kotlin' ]
        extended.java.srcDirs += [ 'src/extended/kotlin' ]
    }

    signingConfigs {
        debug {
            // so that all machines have the same signing key, no matter if app is installed from developer's machine from Jenkins
            storeFile file('debug-keystore.jks')
            storePassword 'find_my_bugs_before_releasing_me'
            keyAlias 'DebugKey'
            keyPassword 'find_my_bugs_before_releasing_me'
        }
    }

    dexOptions {
        maxProcessCount 4 // this is the default value
        javaMaxHeapSize "3g"

        preDexLibraries = true
    }

    testOptions {
        unitTests.all {
            // All the usual Gradle options.
            jvmArgs '-XX:MaxPermSize=256m'

            setIgnoreFailures(true)

            jacoco {
                includeNoLocationClasses = true
//                destinationFile = jacocoOutputFile
            }
        }
    }

    lintOptions {
        // set to true to turn off analysis progress reporting by lint
        quiet true
        // if true, stop the gradle build if errors are found
        abortOnError false
        // if true, only report errors
        ignoreWarnings false
    }

    testfairyConfig {
        apiKey testfairyApiKey
    }

    packagingOptions {
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
    }
}

buildscript {
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinVersion"
        classpath "org.jetbrains.kotlin:kotlin-android-extensions:$kotlinVersion"
    }
}


dependencies {
    compile "org.jetbrains.kotlin:kotlin-stdlib-jre7:$kotlin_version"

    kapt "com.google.dagger:dagger-compiler:$daggerVersion"

    compile project(':DeepThoughtUiCommon')
    compile project(':AndroidCouchbaseLiteEntityManager')
    compile project(':AndroidUdpDevicesDiscoverer')
    compile project(':AndroidFileStorageService')
    compile project(':AndroidPdfImporter')

    compile "com.squareup.picasso:picasso:$picassoVersion"

    compile "com.github.clans:fab:$clansFloatingActionButtonVersion"
    compile "com.daimajia.swipelayout:library:$swipeLayoutVersion"
    compile "com.google.android:flexbox:$flexboxVersion"
    compile 'net.dankito.richtexteditor:richtexteditor-android:1.0.2'

    compile 'me.zhanghai.android.effortlesspermissions:library:1.0.2', {
        exclude group: 'com.android.support', module: 'appcompat-v7'
        exclude group: 'com.android.support', module: 'support-annotations'
    }

    compile "yogesh.firzen:MukkiyaSevaigal:1.0.6"
    compile "org.apache.commons:commons-io:1.3.2"
    compile "yogesh.firzen:FilesLister:1.0.1.g", {
        exclude group: 'com.android.support', module: 'appcompat-v7'
        exclude group: 'com.android.support', module: 'design'
        exclude group: 'com.android.support', module: 'recyclerview-v7'
        exclude group: 'com.android.support', module: 'support-annotations'
    }

    compile "org.slf4j:slf4j-android:$slf4jVersion"

    compile 'com.android.support:multidex:1.0.1'

    compile "com.android.support:appcompat-v7:$androidAppCompatVersion"
    compile "com.android.support:cardview-v7:$androidAppCompatVersion"
    compile "com.android.support:design:$androidDesignVersion"
    compile 'com.android.support.constraint:constraint-layout:1.0.2'

    betaCompile 'testfairy:testfairy-android-sdk:1.+@aar'
//    betaCompile('com.crashlytics.sdk.android:crashlytics:2.6.8@aar') {
//        transitive = true
//    }

    extendedCompile project(':ArticleSummaryExtractors') // not published to Play Store

    testCompile "junit:junit:$junitVersion"

    kaptTest "com.google.dagger:dagger-compiler:$daggerVersion"
//    kapt project(':JPAAnnotationProcessor')

    androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    androidTestCompile("com.android.support.test.espresso:espresso-contrib:2.2.2") {
        exclude group: 'com.android.support', module: 'appcompat-v7'
        exclude group: 'com.android.support', module: 'design'
        exclude group: 'com.android.support', module: 'support-v4'
        exclude group: 'com.android.support', module: 'support-annotations'
        exclude module: 'recyclerview-v7'
    }


    androidTestCompile 'com.squareup.spoon:spoon-client:1.7.1'
    androidTestCompile('com.jraska:falcon-spoon-compat:1.0.4') {
        exclude group: 'com.squareup.spoon', module: 'spoon-client'
    }

    // you need to install fastlane first (install Ruby Package Manager gem): sudo gem install fastlane
    androidTestCompile('tools.fastlane:screengrab:1.0.2') {
        exclude group: 'com.android.support', module: 'support-annotations'
    }

    kaptAndroidTest "com.google.dagger:dagger-compiler:$daggerVersion"
}


check.dependsOn 'checkstyle', 'findbugs', 'pmd'

sonarqube {
    properties {
        property "sonar.java.binaries", "${buildDir}/intermediates/classes/debug"
    }
}


def instrumentationFileName

task createTestReports(type: JacocoReport, dependsOn: ['testDebugUnitTest', 'createDebugCoverageReport']) {
    group = "Reporting"

    reports {
        xml.enabled = true
        html.enabled = true
    }

    def fileFilter = ['**/R.class',
                      '**/R$*.class',
                      '**/BuildConfig.*',
                      '**/*$ViewInjector*.*',
                      '**/*$ViewBinder*.*',
                      '**/*$MembersInjector*.*',
                      '**/Manifest*.*',
                      '**/*Test*.*',
                      'android/**/*.*']
    def debugTree = fileTree(dir: "${buildDir}/intermediates/classes/debug", excludes: fileFilter)
    def mainSrc = "${project.projectDir}/src/main/java"

    sourceDirectories = files([mainSrc])
    classDirectories = files([debugTree])

    executionData = files(jacocoOutputFile)
    def files = fileTree("${buildDir}/outputs/code-coverage/connected/").filter { it.isFile() }.files.name
    instrumentationFileName = "${buildDir}/outputs/code-coverage/connected/" + files[0];
    println('instrumentationFileName = ' + instrumentationFileName);
}
